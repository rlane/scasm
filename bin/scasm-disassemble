#!/usr/bin/env ruby
require 'trollop'
require 'scasm/isa'
require 'scasm/statement'
require 'scasm/value'

include SCASM

opts = Trollop.options do
  banner <<-EOS
scasm-disassembler - Disassemble DCPU-16 binaries.

Usage:
       scasm-disassembler [options] [file]

where [options] are:
EOS
end

mem = ARGF.read.unpack("v*")
addr = 0
basic_opcode_map = BASIC_OPCODES.invert
extended_opcode_map = EXTENDED_OPCODES.invert
register_map = REGISTERS.invert
special_register_map = SPECIAL_REGISTERS.invert

next_word = lambda do
  word = mem[addr]
  addr += 1
  word
end

decode_value = lambda do |value|
  if value <= 0x07
    Register.new register_map[value]
  elsif value <= 0x0f
    RegisterMemory.new register_map[value-INDIRECT]
  elsif value <= 0x17
    OffsetRegisterMemory.new register_map[value-INDIRECT_OFFSET], next_word[]
  elsif sr = special_register_map[value]
    case sr
    when :pop then Pop.new
    when :peek then Peek.new
    when :push then Push.new
    when :sp then SP.new
    when :pc then PC.new
    when :o then O.new
    end
  elsif value == INDIRECT_NEXT
    ImmediateMemory.new next_word[]
  elsif value == NEXT
    Immediate.new next_word[]
  else
    Immediate.new(value-LITERAL)
  end
end

# Create statements for each instruction
stmts = []
jumps = Hash.new { |h,k| h[k] = [] }
while addr < mem.size
  start_addr = addr
  word = next_word[]
  opcode = word & 0xf
  code_a = (word >> 4) & 0x3f
  code_b = (word >> 10) & 0x3f

  if opcode != 0 then
    opsym = basic_opcode_map[opcode] or ($stderr.puts "unknown opcode #{opcode} at #{start_addr}"; next)
    a = decode_value[code_a]
    b = decode_value[code_b]
  else
    opsym = extended_opcode_map[code_a] or ($stderr.puts "unknown extended opcode #{code_a} at #{start_addr}"; next)
    a = decode_value[code_b]
    b = nil
  end

  if opsym == :set and a.is_a? PC and b.is_a? Immediate
    imm = b.value
    b = ImmediateLabel.new "L#{b.value}"
    b.resolve imm
    jumps[imm] << b
  elsif opsym == :jsr and a.is_a? Immediate
    imm = a.value
    a = ImmediateLabel.new "L#{a.value}"
    a.resolve imm
    jumps[imm] << a
  end

  inst = Instruction.new(opsym, a, b)
  inst.addr = start_addr
  stmts << inst
end

# Create labels and fixup jumpers
labelled_stmts = []
stmts.each do |stmt|
  if jumps.member? stmt.addr
    jumpers = jumps[stmt.addr]
    lbl = Label.new("L#{stmt.addr}")
    lbl.addr = stmt.addr
    labelled_stmts << lbl
  end
  labelled_stmts << stmt
end

# Output each statement
labelled_stmts.each do |stmt|
  printf "%-40s # pc=%d\n" % [stmt, stmt.addr]
end
